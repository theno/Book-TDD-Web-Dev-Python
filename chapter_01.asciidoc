[[chapter-1]]
Getting Django Set Up Using a ||Functional Test||
-------------------------------------------------

[[tree_goat]]
.Goats are more agile than you think (source: http://www.flickr.com/photos/caitlinstewart/2846642630/[Caitlin Stewart, on Flickr])
image::images/twdp_0101.png["A picture of a goat up a tree", scale="50"]

Obey the Testing Goat! Do Nothing Until You Have a Test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here's about the simplest imaginable test:

[role="sourcecode"]
.functional_tests.py
[source,python]
----
from selenium import webdriver

browser = webdriver.Firefox()
browser.get('http://localhost:8000')

assert 'Django' in browser.title
----

Expected output:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
Traceback (most recent call last):
  File "functional_tests.py", line 6, in <module>
    assert 'Django' in browser.title
AssertionError
----



Getting Django Up and Running
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[subs="specialcharacters,quotes"]
----
$ *django-admin.py startproject superlists*
----

That will create a folder called 'superlists', and a set of files and
subfolders inside it:

----
.
├── functional_tests.py
└── superlists
    ├── manage.py
    └── superlists
        ├── __init__.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py
----

* ask about: why are there two folders called superlists?


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py runserver*]
Performing system checks...

System check identified no issues (0 silenced).

You have unapplied migrations; your app may not work properly until they are
applied.
Run 'python manage.py migrate' to apply them.

Django version 1.7.7, using settings 'superlists.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
----

NOTE: It's safe to ignore that message about "unapplied migrations" for now.
    We'll look at migrations in <<chapter-5>>.

Leave that running, and open another command shell.  In that, we can try
running our test again (from the folder we started in):


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
$ 
----


Not much action on the command line, but you should notice two things: firstly,
there was no ugly `AssertionError` and secondly, the Firefox window that
Selenium popped up had a different-looking page on it.

Well, it may not look like much, but that was our first ever passing test!
Hooray!

If it all feels a bit too much like magic, like it wasn't quite real, why not
go and take a look at the dev server manually, by opening a web browser
yourself and visiting http://localhost:8000?  You should see something like
<<it_worked_screenshot>>.

[[it_worked_screenshot]]
.It worked!
image::images/twdp_0102.png[Screenshot of Django "It Worked" screen]

You can quit the development server now if you like, back in the original
shell, using Ctrl-C.


Optional: Starting a Git repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's start by moving 'functional_tests.py' into the 'superlists' folder, and
doing the `git init` to start the repository:


[subs="specialcharacters,quotes"]
----
$ *ls*
superlists          functional_tests.py
$ *mv functional_tests.py superlists/*
$ *cd superlists*
$ *git init .*
Initialised empty Git repository in /workspace/superlists/.git/
----


NOTE: From this point onwards, the top-level 'superlists' folder will be our
working directory.  Whenever I show a command to type in, it will assume we're
in this directory.  Similarly, if I mention a path to a file, it will be 
relative to this top-level directory.  So 'superlists/settings.py' means
the 'settings.py' inside the second-level 'superlists'. Clear as mud? If in
doubt, look for 'manage.py'; you want to be in the same directory as
'manage.py'.


Now let's take a look and see what files we want to commit:

[subs="specialcharacters,quotes"]
----
$ *ls*
db.sqlite3  manage.py   superlists  functional_tests.py
----

`db.sqlite3` is a database file.  We don't want to have that in
version control, so we add it to a special file called '.gitignore'
which, um, tells Git what to ignore:

[subs="specialcharacters,quotes"]
----
$ *echo "db.sqlite3" >> .gitignore*
----

Next we can add the rest of the contents of the current folder, ".":

[subs="specialcharacters,quotes"]
----
$ *git add .*
$ *git status*
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   .gitignore
        new file:   functional_tests.py
        new file:   manage.py
        new file:   superlists/__init__.py
        new file:   superlists/__pycache__/__init__.cpython-34.pyc
        new file:   superlists/__pycache__/settings.cpython-34.pyc
        new file:   superlists/__pycache__/urls.cpython-34.pyc
        new file:   superlists/__pycache__/wsgi.cpython-34.pyc
        new file:   superlists/settings.py
        new file:   superlists/urls.py
        new file:   superlists/wsgi.py
----


Oops, remove '.pyc' files, and '.gitignore' them:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*git rm -r --cached superlists/__pycache__*]
rm 'superlists/__pycache__/__init__.cpython-34.pyc'
rm 'superlists/__pycache__/settings.cpython-34.pyc'
rm 'superlists/__pycache__/urls.cpython-34.pyc'
rm 'superlists/__pycache__/wsgi.cpython-34.pyc'
$ pass:quotes[@echo "__pycache__" >> .gitignore@]
$ pass:quotes[@echo "*.pyc" >> .gitignore@]
----

Now let's see where we are... 


[subs="specialcharacters,quotes"]
----
$ *git status*
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   .gitignore
        new file:   functional_tests.py
        new file:   manage.py
        new file:   superlists/__init__.py
        new file:   superlists/settings.py
        new file:   superlists/urls.py
        new file:   superlists/wsgi.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   .gitignore
----

Looking good, we're ready to do our first commit!

[subs="specialcharacters,quotes"]
----
$ *git add .gitignore*
$ *git commit*
----

If vi pops up and you have no idea what to do, ask!


.Advanced Exercise:
********************************************************************
Can you swap out Firefox for another browser?  Chrome?  You'll need something
called ChromeDriver.  Also, check out `PhantomJS`

********************************************************************

