[[chapter-2]]
Extending Our Functional Test Using the unittest Module
-------------------------------------------------------


Using a Functional Test to Scope Out a Minimum Viable App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FT = user story, written as comments:


[role="sourcecode"]
.functional_tests.py
[source,python]
----
from selenium import webdriver

browser = webdriver.Firefox()

# Edith has heard about a cool new online to-do app. She goes
# to check out its homepage
browser.get('http://localhost:8000')

# She notices the page title and header mention to-do lists
assert 'To-Do' in browser.title

# She is invited to enter a to-do item straight away

# She types "Buy peacock feathers" into a text box (Edith's hobby
# is tying fly-fishing lures)

# When she hits enter, the page updates, and now the page lists
# "1: Buy peacock feathers" as an item in a to-do list

# There is still a text box inviting her to add another item. She
# enters "Use peacock feathers to make a fly" (Edith is very methodical)

# The page updates again, and now shows both items on her list

# Edith wonders whether the site will remember her list. Then she sees
# that the site has generated a unique URL for her -- there is some
# explanatory text to that effect.

# She visits that URL - her to-do list is still there.

# Satisfied, she goes back to sleep

browser.quit()
----

First, start up the server:


[subs="specialcharacters,quotes"]
----
$ *python3 manage.py runserver*
----

And then, in another shell, run the tests:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
Traceback (most recent call last):
  File "functional_tests.py", line 10, in <module>
    assert 'To-Do' in browser.title
AssertionError
----

* "expected fail"


The Python Standard Library's unittest Module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fixing the unhelpful error message -- option 1:

[role="skipme"]
[source,python]
----
assert 'To-Do' in browser.title, "Browser title was " + browser.title
----

And we could also use a `try/finally` to clean up the old Firefox window. 

Better: use `unittest`:

[role="sourcecode"]
.functional_tests.py
[source,python]
----
from selenium import webdriver
import unittest

class NewVisitorTest(unittest.TestCase):  #<1>

    def setUp(self):  #<3>
        self.browser = webdriver.Firefox()

    def tearDown(self):  #<3>
        self.browser.quit()

    def test_can_start_a_list_and_retrieve_it_later(self):  #<2>
        # Edith has heard about a cool new online to-do app. She goes
        # to check out its homepage
        self.browser.get('http://localhost:8000')

        # She notices the page title and header mention to-do lists
        self.assertIn('To-Do', self.browser.title)  #<4>
        self.fail('Finish the test!')  #<5>

        # She is invited to enter a to-do item straight away
        [...rest of comments as before]

if __name__ == '__main__':  #<6>
    unittest.main(warnings='ignore')  #<7>
----

Make sure I explain all of the little numbers!

Let's try it!

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
F
======================================================================
FAIL: test_can_start_a_list_and_retrieve_it_later (__main__.NewVisitorTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "functional_tests.py", line 18, in
test_can_start_a_list_and_retrieve_it_later
    self.assertIn('To-Do', self.browser.title)
AssertionError: 'To-Do' not found in 'Welcome to Django'

 ---------------------------------------------------------------------
Ran 1 test in 1.747s

FAILED (failures=1)
----

Bonzer!


Implicit waits
~~~~~~~~~~~~~~

[role="sourcecode"]
.functional_tests.py
[source,python]
----
[...]
def setUp(self):
    self.browser = webdriver.Firefox()
    self.browser.implicitly_wait(3)

def tearDown(self):
[...]
----


.Advanced Exercise:
********************************************************************

Find out about the `addCleanup` function.  How would you use it in this case?
What would it replace?  What do you think the advantages and disadvantages
might be?
********************************************************************


Optional: Commit
~~~~~~~~~~~~~~~~

Do a **`git status`**&mdash;that should assure you that the only file that has
changed is 'functional_tests.py'.  Then do a `git diff`, which shows you the
difference between the last commit and what's currently on disk. That should
tell you that 'functional_tests.py' has changed quite substantially:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*git diff*]
diff --git a/functional_tests.py b/functional_tests.py
index d333591..b0f22dc 100644
--- a/functional_tests.py
+++ b/functional_tests.py
@@ -1,6 +1,45 @@
 from selenium import webdriver
+import unittest

-browser = webdriver.Firefox()
-browser.get('http://localhost:8000')
+class NewVisitorTest(unittest.TestCase):

-assert 'Django' in browser.title
+    def setUp(self):
+        self.browser = webdriver.Firefox()
+        self.browser.implicitly_wait(3)
+
+    def tearDown(self):
+        self.browser.quit()
[...]
----

Now let's do a:

[subs="specialcharacters,quotes"]
----
$ *git commit -a*
----

The *`-a`* means ``automatically add any changes to tracked files''


When the editor pops up, add a descriptive commit message, like ``First FT
specced out in comments, and now uses unittest''.


.Useful TDD Concepts
*******************************************************************************
User Story::
    A description of how the application will work from the point of view
    of the user.  Used to structure a functional test.

Expected failure::
    When a test fails in the way that we expected it to.

*******************************************************************************


