[[chapter-3]]
Testing a Simple Home Page with Unit Tests
------------------------------------------


Let's start an app for our to-do lists:


Our First Django App, and Our First Unit Test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'Projects' are made up of 'apps'...

[subs="specialcharacters,quotes"]
----
$ *python3 manage.py startapp lists*
----

That will create a folder at 'superlists/lists', next to
'superlists/superlists', and within it a number of placeholder files for
things like models, views, and, of immediate interest to us, tests:

----
superlists/
├── db.sqlite3
├── functional_tests.py
├── lists
│   ├── admin.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── manage.py
└── superlists
    ├── __init__.py
    ├── __pycache__
    ├── settings.py
    ├── urls.py
    └── wsgi.py
----


Unit Tests, and How They Differ from Functional Tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE: a good place to ask questions, if I don't explain myself well here!


Unit Testing in Django
~~~~~~~~~~~~~~~~~~~~~~

((("unit tests", "in Django", sortas="django")))
((("Django", "unit testing in")))
Let's see how to write a unit test for our home page view. Open up the new
file at 'lists/tests.py', and you'll see something like this:


[role="sourcecode currentcontents"]
.lists/tests.py
[source,python]
----
from django.test import TestCase

# Create your tests here.
----

Let's deliberately create a breaking test and see if we can see it fail.

++++
<?hard-pagebreak?>
++++

[role="sourcecode"]
.lists/tests.py
[source,python]
----
from django.test import TestCase

class SmokeTest(TestCase):

    def test_bad_maths(self):
        self.assertEqual(1 + 1, 3)
----

((("manage.py")))
Now let's invoke this mysterious Django test runner. As usual, it's a
'manage.py' ||command:||


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test*]
Creating test database for alias 'default'...
F
======================================================================
FAIL: test_bad_maths (lists.tests.SmokeTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "/workspace/superlists/lists/tests.py", line 6, in test_bad_maths
    self.assertEqual(1 + 1, 3)
AssertionError: 2 != 3

 ---------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
Destroying test database for alias 'default'...
----

Excellent.  The machinery seems to be working. This is a good point for a
commit:


[subs="specialcharacters,quotes"]
----
$ *git status*  # should show you lists/ is untracked
$ *git add lists*
$ *git diff --staged*  # will show you the diff that you're about to commit
$ *git commit -m "Add app for lists, with deliberately failing unit test"*
----

As no doubt you've guessed, the `-m` flag lets you pass in a commit message
at the command-line.


Django's MVC, URLs, and View Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* MVC
* resolving URLs
* view functions

Open up 'lists/tests.py', and change our silly test to something like this:


Unit testing a view
~~~~~~~~~~~~~~~~~~~

[role="sourcecode"]
.lists/tests.py
[source,python]
----
from django.test import TestCase
from django.http import HttpRequest

from lists.views import home_page


class HomePageTest(TestCase):

    def test_home_page_returns_correct_html(self):
        request = HttpRequest() #<1>
        response = home_page(request) #<2>
        self.assertTrue(response.content.startswith(b'<html>')) #<3>
        self.assertIn(b'<title>To-Do lists</title>', response.content) #<4>
        self.assertTrue(response.content.endswith(b'</html>')) #<3>
----

So, what do you think will happen when we run the tests?


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test*]
ImportError: cannot import name 'home_page'
----


At Last! We Actually Write Some Application Code!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

What next?


[role="sourcecode"]
.lists/views.py
[source,python]
----
from django.shortcuts import render

# Create your views here.
home_page = None
----


Yeah. Srsly


Unit test / code cycle
^^^^^^^^^^^^^^^^^^^^^^

----
    response = home_page(request)
TypeError: 'NoneType' object is not callable
----

* minimal code:



[role="sourcecode"]
.lists/views.py
[source,python]
----
from django.shortcuts import render

# Create your views here.
def home_page():
    pass
----


* tests:

----
TypeError: home_page() takes 0 positional arguments but 1 was given
----

* code:


[role="sourcecode"]
.lists/views.py
[source,python]
----
def home_page(request):
    pass
----

* Tests:

----
    self.assertTrue(response.content.startswith(b'<html>'))
AttributeError: 'NoneType' object has no attribute 'content'
----


* Code--we use `django.http.HttpResponse`, as predicted:

[role="sourcecode"]
.lists/views.py
[source,python]
----
from django.http import HttpResponse

# Create your views here.
def home_page(request):
    return HttpResponse()
----

* Tests again:

----
    self.assertTrue(response.content.startswith(b'<html>'))
AssertionError: False is not true
----

* Code again:

[role="sourcecode"]
.lists/views.py
[source,python]
----
def home_page(request):
    return HttpResponse('<html>')
----

* Tests:

----
AssertionError: b'<title>To-Do lists</title>' not found in b'<html>'
----

* Code:


[role="sourcecode"]
.lists/views.py
[source,python]
----
def home_page(request):
    return HttpResponse('<html><title>To-Do lists</title>')
----

* Tests--almost there?

----
    self.assertTrue(response.content.endswith(b'</html>'))
AssertionError: False is not true
----

* Come on, one last effort:


[role="sourcecode"]
.lists/views.py
[source,python]
----
def home_page(request):
    return HttpResponse('<html><title>To-Do lists</title></html>')
----


* Surely?


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test*]
Creating test database for alias 'default'...
.
 ---------------------------------------------------------------------
Ran 1 test in 0.003s

OK
Destroying test database for alias 'default'...
----

Yes!  Now, let's run our functional tests.  Don't forget to spin up the dev
server again, if it's not still running. It feels like the final heat
of the race here, surely this is it ... could it be?


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
F
======================================================================
FAIL: test_can_start_a_list_and_retrieve_it_later (__main__.NewVisitorTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "functional_tests.py", line 19, in
test_can_start_a_list_and_retrieve_it_later
    self.assertIn('To-Do', self.browser.title)
AssertionError: 'To-Do' not found in 'Welcome to Django'

 ---------------------------------------------------------------------
Ran 1 test in 1.747s

FAILED (failures=1)
----

Nope!

Urls.py
~~~~~~~


[role="sourcecode"]
.superlists/urls.py
[source,python]
----
urlpatterns = patterns('',
    # Examples:
    url(r'^$', 'lists.views.home_page', name='home'),
    [...]
----


.Advanced Exercise:
********************************************************************

How would you write a unit test for urls.py?  Hint: look into the Django
'reverse' and 'resolve' functions.

********************************************************************




Back to FTS:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 functional_tests.py*]
F
======================================================================
FAIL: test_can_start_a_list_and_retrieve_it_later (__main__.NewVisitorTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "functional_tests.py", line 20, in
test_can_start_a_list_and_retrieve_it_later
    self.fail('Finish the test!')
AssertionError: Finish the test!

 ---------------------------------------------------------------------
Ran 1 test in 1.609s

FAILED (failures=1)
----

Yay!  expected failure.



[subs="specialcharacters,quotes"]
----
$ *git diff* # should show urls.py, tests.py, views.py
$ *git commit -am"Basic view now returns minimal HTML"*
----


Not bad--we covered:


* Starting a Django app
* The Django unit test runner
* The difference between FTs and unit tests
* Django URL resolving and 'urls.py'
* Django view functions, request and response objects
* And returning basic HTML


.Useful Commands and Concepts
*******************************************************************************
Running the Django dev server::
    *`python3 manage.py runserver`*

Running the functional tests::
    *`python3 functional_tests.py`*

Running the unit tests::
    *`python3 manage.py test`*

The unit-test/code cycle::
    1. Run the unit tests in the terminal.
    2. Make a minimal code change in the editor.
    3. Repeat!

*******************************************************************************

